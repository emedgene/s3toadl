"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const chai_1 = require("chai");
require("mocha");
const sinon = require("sinon");
const awsS3Module_1 = require("../src/awsS3Module");
const azureDataLakeModule_1 = require("../src/azureDataLakeModule");
const redisModule_1 = require("../src/redisModule");
const s3ToAdlDataCopy_1 = require("../src/s3ToAdlDataCopy");
describe("aws s3 tests", () => {
    let s3ToAdl;
    let adlModule;
    let awsS3Module;
    let redisModule;
    const expectedElement1 = {
        ETag: "123456",
        Key: "file1",
    };
    const expectedElement2 = {
        ETag: "123457",
        Key: "file2",
    };
    beforeEach(function () {
        process.env["AWS_ACCESS_KEY_ID"] = "key";
        process.env["AWS_SECRET_ACCESS_KEY"] = "secretkey";
        process.env["AWS_REGION"] = "region";
        process.env["AWS_BUCKET_NAME"] = "bucket";
        process.env["AZURE_CLIENT_ID"] = "client";
        process.env["AZURE_DOMAIN"] = "domain";
        process.env["AZURE_SECRET"] = "secret";
        process.env["AZURE_ADL_ACCOUNT_NAME"] = "account";
        process.env["TEMP_FOLDER"] = "./tempFolder";
        process.env["USE_REDIS"] = "false";
        const bucketName = "bucket";
        const tempFolder = "tempFolder";
        awsS3Module = new awsS3Module_1.AwsS3Module(bucketName, tempFolder, new AWS.S3());
        adlModule = new azureDataLakeModule_1.AzureDataLakeModule("accountName", "folderName", null);
    });
    it("When required environment variables are missing exception is thrown", () => {
        // given
        delete process.env["AZURE_ADL_ACCOUNT_NAME"];
        // act
        try {
            s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        }
        catch (ex) {
            // assert
            chai_1.expect(ex.message).to.equal("Environment Variable AZURE_ADL_ACCOUNT_NAME is not defined");
        }
    });
    it("When USE_REDIS is set to other variable then true/false exception is thrown", () => {
        // given
        process.env["USE_REDIS"] = "some value";
        // act
        try {
            s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        }
        catch (ex) {
            // assert
            chai_1.expect(ex.message).to.equal("Environment Variable USE_REDIS should contain boolean value");
        }
    });
    it("batchIterationOverS3Items doesn't uploads file when it's already exists", () => __awaiter(this, void 0, void 0, function* () {
        // given
        sinon.stub(awsS3Module, "listAllObjects").returns({
            Contents: [expectedElement1, expectedElement2],
        });
        const uploadToAdlStub = sinon.stub(adlModule, "shouldUploadToADL").returns(new Promise((resolve) => {
            resolve(false);
        }));
        const awsSpy = sinon.spy(awsS3Module, "downloadFileFromS3");
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        yield s3ToAdl.batchIterationOverS3Items(awsS3Module, adlModule, null);
        // assert
        chai_1.expect(awsSpy.callCount).to.equal(0);
        chai_1.expect(uploadToAdlStub.callCount).to.equal(2);
    }));
    it("batchIterationOverS3Items uploads the missing file in ADL", () => __awaiter(this, void 0, void 0, function* () {
        // given
        sinon.stub(awsS3Module, "listAllObjects").returns({
            Contents: [expectedElement1, expectedElement2],
        });
        let downloadStub = sinon.stub(awsS3Module, "downloadFileFromS3").returns(new Promise((resolve) => resolve()));
        sinon.stub(adlModule, "uploadFileToAzureDataLake").returns(new Promise((resolve) => resolve()));
        const uploadStub = sinon.stub(adlModule, "shouldUploadToADL");
        uploadStub.withArgs(expectedElement1).returns(new Promise((resolve) => {
            resolve(false);
        }));
        uploadStub.withArgs(expectedElement2).returns(new Promise((resolve) => {
            resolve(true);
        }));
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        yield s3ToAdl.batchIterationOverS3Items(awsS3Module, adlModule, null);
        // assert
        chai_1.expect(downloadStub.callCount).to.equal(1);
        chai_1.expect(uploadStub.callCount).to.equal(2);
    }));
    it("batchIterationOverS3Items when error is thrown while uploading file iteration continues as expected", () => __awaiter(this, void 0, void 0, function* () {
        // given
        sinon.stub(awsS3Module, "listAllObjects").returns({
            Contents: [expectedElement1, expectedElement2],
        });
        let downloadStub = sinon.stub(awsS3Module, "downloadFileFromS3").returns(new Promise((resolve) => resolve()));
        let uploadStub = sinon.stub(adlModule, "uploadFileToAzureDataLake");
        uploadStub.withArgs(expectedElement1.Key).throws(new Error());
        uploadStub.withArgs(expectedElement2.Key).returns(new Promise((resolve) => resolve()));
        const shouldUploadStub = sinon.stub(adlModule, "shouldUploadToADL").returns(new Promise((resolve) => {
            resolve(true);
        }));
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        yield s3ToAdl.batchIterationOverS3Items(awsS3Module, adlModule, null);
        // assert
        chai_1.expect(downloadStub.callCount).to.equal(2);
        chai_1.expect(shouldUploadStub.callCount).to.equal(2);
        // expect only one since the second thrown an error
        chai_1.expect(s3ToAdl.copyProperties.uploadedCount).to.equal(1);
    }));
    it("shouldUploadFile return false when using redis and file exist on ADL", () => __awaiter(this, void 0, void 0, function* () {
        // given
        process.env["USE_REDIS"] = "true";
        const redisObj = new redisModule_1.RedisObject();
        redisObj.ETag = expectedElement1.ETag;
        redisModule = new redisModule_1.RedisModule(null);
        const shouldUploadStub = sinon.stub(redisModule, "isFileInRedis").returns(new Promise((resolve) => {
            resolve(redisObj);
        }));
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        let shouldUpload = yield s3ToAdl.shouldUploadFile(redisModule, adlModule, expectedElement1);
        // assert
        chai_1.expect(shouldUploadStub.callCount).to.equal(1);
        // expect only one since the second thrown an error
        chai_1.expect(shouldUpload).to.equal(false);
    }));
    it("shouldUploadFile return true when using redis and file is missing from ADL", () => __awaiter(this, void 0, void 0, function* () {
        // given
        process.env["USE_REDIS"] = "true";
        const redisObj = new redisModule_1.RedisObject();
        redisObj.ETag = "6543321";
        redisModule = new redisModule_1.RedisModule(null);
        const shouldUploadStub = sinon.stub(redisModule, "isFileInRedis").returns(new Promise((resolve) => {
            resolve(redisObj);
        }));
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        let shouldUpload = yield s3ToAdl.shouldUploadFile(redisModule, adlModule, expectedElement1);
        // assert
        chai_1.expect(shouldUploadStub.callCount).to.equal(1);
        // expect only one since the second thrown an error
        chai_1.expect(shouldUpload).to.equal(true);
    }));
    it("shouldUploadFile return true and not update redis when redis is empty and file exist on ADL", () => __awaiter(this, void 0, void 0, function* () {
        // given
        process.env["USE_REDIS"] = "true";
        redisModule = new redisModule_1.RedisModule(null);
        const isFileInRedisStub = sinon.stub(redisModule, "isFileInRedis").returns(new Promise((resolve) => {
            resolve(null);
        }));
        const addFileToRedisStub = sinon.stub(redisModule, "addFileToRedis").returns(new Promise((resolve) => {
            resolve();
        }));
        const uploadToAdlStub = sinon.stub(adlModule, "shouldUploadToADL").returns(new Promise((resolve) => {
            resolve(false);
        }));
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        let shouldUpload = yield s3ToAdl.shouldUploadFile(redisModule, adlModule, expectedElement1);
        // assert
        chai_1.expect(isFileInRedisStub.callCount).to.equal(1);
        chai_1.expect(shouldUpload).to.equal(false);
        chai_1.expect(addFileToRedisStub.callCount).to.equal(1);
    }));
    it("shouldUploadFile return true and update redis when redis is empty and file exist on ADL", () => __awaiter(this, void 0, void 0, function* () {
        // given
        process.env["USE_REDIS"] = "true";
        redisModule = new redisModule_1.RedisModule(null);
        const isFileInRedisStub = sinon.stub(redisModule, "isFileInRedis").returns(new Promise((resolve) => {
            resolve(null);
        }));
        const addFileToRedisStub = sinon.stub(redisModule, "addFileToRedis");
        const uploadToAdlStub = sinon.stub(adlModule, "shouldUploadToADL").returns(new Promise((resolve) => {
            resolve(true);
        }));
        // act
        s3ToAdl = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
        let shouldUpload = yield s3ToAdl.shouldUploadFile(redisModule, adlModule, expectedElement1);
        // assert
        chai_1.expect(isFileInRedisStub.callCount).to.equal(1);
        chai_1.expect(shouldUpload).to.equal(true);
        chai_1.expect(addFileToRedisStub.callCount).to.equal(0);
    }));
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
