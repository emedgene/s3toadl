"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const rimraf = require("rimraf");
const logger_1 = require("./logger");
/**
 * Return the names of all the directories in the file path
 * Example: for dir1/dir2/dir3/filename return [dir1, dir2, dir3];
 */
function getDirectoriesPathArray(filePath) {
    const filePathArray = filePath.split("/");
    return filePathArray.slice(0, filePathArray.length - 1);
}
exports.getDirectoriesPathArray = getDirectoriesPathArray;
/**
 * Create directory if it not exist.
 * Create it by path and directory name, or by the full path.
 */
function createDirIfNotExists(filePath, dirName, fullFilePath) {
    const fullPath = fullFilePath || path.join(filePath, dirName);
    if (!fs.existsSync(fullPath)) {
        logger_1.winston.verbose(`Creating directory ${fullPath}`);
        fs.mkdirSync(fullPath);
    }
}
exports.createDirIfNotExists = createDirIfNotExists;
function deleteFile(filePath) {
    // Delete local file
    fs.unlinkSync(filePath);
    logger_1.winston.verbose(`file ${filePath} was deleted from local folder`);
}
exports.deleteFile = deleteFile;
function deleteFolder(path) {
    rimraf(path, (err) => {
        if (err) {
            logger_1.winston.error(`Error deleting directories ${err}`);
        }
    });
}
exports.deleteFolder = deleteFolder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maWxlc0hlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBQ2pDLHFDQUFtQztBQUVuQzs7O0dBR0c7QUFDSCxpQ0FBd0MsUUFBZ0I7SUFDcEQsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBSEQsMERBR0M7QUFFRDs7O0dBR0c7QUFDSCw4QkFBcUMsUUFBaUIsRUFBRSxPQUFnQixFQUFFLFlBQXFCO0lBQzNGLE1BQU0sUUFBUSxHQUFHLFlBQVksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUU5RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLGdCQUFPLENBQUMsT0FBTyxDQUFDLHNCQUFzQixRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztBQUNMLENBQUM7QUFQRCxvREFPQztBQUVELG9CQUEyQixRQUFnQjtJQUN2QyxvQkFBb0I7SUFDcEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QixnQkFBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLFFBQVEsZ0NBQWdDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBSkQsZ0NBSUM7QUFFRCxzQkFBNkIsSUFBWTtJQUNyQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRztRQUNiLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDTixnQkFBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBTkQsb0NBTUMiLCJmaWxlIjoic3JjL2ZpbGVzSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0ICogYXMgcmltcmFmIGZyb20gXCJyaW1yYWZcIjtcclxuaW1wb3J0IHsgd2luc3RvbiB9IGZyb20gXCIuL2xvZ2dlclwiO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiB0aGUgbmFtZXMgb2YgYWxsIHRoZSBkaXJlY3RvcmllcyBpbiB0aGUgZmlsZSBwYXRoXHJcbiAqIEV4YW1wbGU6IGZvciBkaXIxL2RpcjIvZGlyMy9maWxlbmFtZSByZXR1cm4gW2RpcjEsIGRpcjIsIGRpcjNdO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERpcmVjdG9yaWVzUGF0aEFycmF5KGZpbGVQYXRoOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBmaWxlUGF0aEFycmF5ID0gZmlsZVBhdGguc3BsaXQoXCIvXCIpO1xyXG4gICAgcmV0dXJuIGZpbGVQYXRoQXJyYXkuc2xpY2UoMCwgZmlsZVBhdGhBcnJheS5sZW5ndGggLSAxKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBkaXJlY3RvcnkgaWYgaXQgbm90IGV4aXN0LlxyXG4gKiBDcmVhdGUgaXQgYnkgcGF0aCBhbmQgZGlyZWN0b3J5IG5hbWUsIG9yIGJ5IHRoZSBmdWxsIHBhdGguXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlySWZOb3RFeGlzdHMoZmlsZVBhdGg/OiBzdHJpbmcsIGRpck5hbWU/OiBzdHJpbmcsIGZ1bGxGaWxlUGF0aD86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgZnVsbFBhdGggPSBmdWxsRmlsZVBhdGggfHwgcGF0aC5qb2luKGZpbGVQYXRoLCBkaXJOYW1lKTtcclxuXHJcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZnVsbFBhdGgpKSB7XHJcbiAgICAgICAgd2luc3Rvbi52ZXJib3NlKGBDcmVhdGluZyBkaXJlY3RvcnkgJHtmdWxsUGF0aH1gKTtcclxuICAgICAgICBmcy5ta2RpclN5bmMoZnVsbFBhdGgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlRmlsZShmaWxlUGF0aDogc3RyaW5nKSB7XHJcbiAgICAvLyBEZWxldGUgbG9jYWwgZmlsZVxyXG4gICAgZnMudW5saW5rU3luYyhmaWxlUGF0aCk7XHJcbiAgICB3aW5zdG9uLnZlcmJvc2UoYGZpbGUgJHtmaWxlUGF0aH0gd2FzIGRlbGV0ZWQgZnJvbSBsb2NhbCBmb2xkZXJgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUZvbGRlcihwYXRoOiBzdHJpbmcpIHtcclxuICAgIHJpbXJhZihwYXRoLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICB3aW5zdG9uLmVycm9yKGBFcnJvciBkZWxldGluZyBkaXJlY3RvcmllcyAke2Vycn1gKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSJdLCJzb3VyY2VSb290IjoiLi4ifQ==
